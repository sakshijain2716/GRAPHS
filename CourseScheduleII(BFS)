//LEETCODE 211
// prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
// Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. 
// If it is impossible to finish all courses, return an empty array.

class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        int n = numCourses;
        vector<int> adj[n];
        for(auto it:prerequisites)
        {
            adj[it[1]].push_back(it[0]);
        }
        vector<int> indeg(n,0);
        for(int i=0;i<n;i++)
        {
            for(auto it:adj[i])
            indeg[it]++;
        }
        queue<int>q;
        for(int i=0;i<n;i++)
        {
            if(indeg[i]==0)
            q.push(i);
        }
        vector<int>course;
        int count=0;
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            course.push_back(node);
            count++;
            for(auto it:adj[node])
            {
                indeg[it]--;
                if(indeg[it]==0)
                q.push(it);
            }
        }
        if(count==n)
        return course;
        else
        return {};
        
    }
};
