class Solution {
public:

   void dfs(int src ,vector<int> adj[], vector<int> &vis)
   {
       vis[src]=1;  
       for(auto it:adj[src])
       {
           if(!vis[it])
           dfs(it,adj,vis);  
       }
   } 

    int findCircleNum(vector<vector<int>>& isConnected) {
        int count=0;
        int n = isConnected.size(), m = isConnected[0].size();
        vector<int> vis(n,0);
        
            //converting adj matrix into adj list
        vector<int> adj[n];
       for(int i=0;i<n;i++)
       {
           for(int j=0;j<m;j++)
           {
               if(isConnected[i][j]==1 && i!=j)
               {
               adj[i].push_back(j);
               adj[j].push_back(i);
               }
           }
       } 
       //adj list is created

        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                count++;
                dfs(i,adj,vis);
            }
        }
        return count;
    }
};
