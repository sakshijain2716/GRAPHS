class Solution {
public:
void dfs(int row , int col , vector<vector<int>> &vis ,vector<vector<char>>& board,vector<int>&delrow ,vector<int>&delcol)
{
     int n = board.size() , m = board[0].size();
    vis[row][col] = 1;
    for(int i=0 ; i<4 ; i++)
    {
        int nrow = row+delrow[i];
        int ncol = col+delcol[i];
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && board[nrow][ncol] =='O' && !vis[nrow][ncol])
        dfs(nrow, ncol ,vis,board ,delrow , delcol);
    }

}
    void solve(vector<vector<char>>& board)
     {
        int n = board.size() , m = board[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        queue<pair<int,int>> q;
        vector<int>delrow = {-1 , 0 , 0 , +1};
        vector<int>delcol = {0 , -1 , +1 , 0};
        for(int i=0 ; i<n ; i++)
        {
            for(int j=0 ; j<m ; j++)
            {
                if((i==0 || i==n-1 || j==0 || j==m-1))
                {
                    if(board[i][j]=='O' && !vis[i][j])
                    {
                    q.push({i,j});
                    vis[i][j] = 1;
                    }
                }
            }
        }

        while(!q.empty())
        {
            int r = q.front().first;
            int c = q.front().second;
            q.pop();

            for(int i=0 ; i<4 ;i++)
            {
                int nrow = r+delrow[i];
                int ncol = c+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && board[nrow][ncol]=='O')
                {
                    q.push({nrow,ncol});
                    vis[nrow][ncol] = 1;
                }
            }
        }
        for(int i=0 ; i<n ; i++)
        {
            for(int j=0 ; j<m ; j++)
            {
                if(!vis[i][j] && board[i][j]=='O')
                board[i][j] = 'X';
            }
        }
    }
};
