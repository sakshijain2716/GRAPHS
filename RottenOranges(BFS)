class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int m = grid.size() , n = grid[0].size();
        vector<vector<int>> vis(m , vector<int>(n,0));
        queue<pair< pair<int,int>,int>> q;
        int cnt=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==2)
                {
                vis[i][j]=2;
                q.push({{i,j},0});
                }
                else if(grid[i][j]==1)
                cnt++;
            }
        }
        int ans=0,tm=0;
        int delrow[] = {-1,0,0,+1};
        int delcol[] = {0,-1,+1,0};
        while(!q.empty())
        {
            int r = q.front().first.first;
            int c = q.front().first.second;
            int t = q.front().second;
            q.pop();
            tm = t;
            for(int i=0;i<4;i++)
            {
                int nrow = r+delrow[i];
                int ncol = c+delcol[i];
                if(nrow>=0 && nrow<m && ncol>=0 && ncol<n && vis[nrow][ncol]==0 && grid[nrow][ncol]==1)
                {
                    vis[nrow][ncol]=2;
                    q.push({{nrow,ncol},t+1});
                    ans++;
                }
            }
            
        }
        if(cnt!=ans)
        return -1;
        else
        return tm;
        
    }
};
