class Solution{
    public:
    vector<int> toposort(int V , vector<vector<int>> &adj)
    {
        queue<int> q;
        vector<int>indeg(V,0);
        vector<int>topo;
        for(int i=0 ; i<V; i++)
        {
            for(auto it:adj[i])
            {
                indeg[it]++;
            }
        }
        
        for(int i=0 ; i<V ;i++)
        {
            if(indeg[i]==0)
            q.push(i);
        }
        // int cnt=0;
        while(!q.empty())
        {
            int node=  q.front();
            q.pop();
            topo.push_back(node);
            // cnt++;
            for(auto it:adj[node])
            {
                indeg[it]--;
                if(indeg[it]==0)
                q.push(it);
            }
        }
        // if(cnt==K)
        return topo;
        // else
        // return {};
    }
    string findOrder(string dict[], int N, int K) {
        //code here
        vector<vector<int>> adj(K);
        for(int i=0 ; i<N-1 ; i++) //we will compare two conecutive strings
        {
            string s1 = dict[i];
            string s2 = dict[i+1];
            int len = min(s1.size() , s2.size());
            for(int j=0 ; j<len ; j++)
            {
                if(s1[j] != s2[j])
                {
                adj[s1[j]-'a'].push_back(s2[j]-'a');
                break;
                }
            }
        }
        
        vector<int>topo = toposort(K , adj);
        string ans="";
        for(auto it:topo)
        {
            ans = ans + char(it+'a');
        }
        return ans;
    }
};
