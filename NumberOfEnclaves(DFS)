class Solution {
public:
void dfs(int row , int col ,vector<vector<int>>&vis ,vector<int>&delrow,vector<int>&delcol, vector<vector<int>>& grid)
{
    int n = grid.size() , m= grid[0].size();
    vis[row][col] = 1;
    // time +=1;
    for(int i=0 ; i<4 ;i++)
    {
        int nrow = row+delrow[i];
        int ncol = col+delcol[i];
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && grid[nrow][ncol]==1)
        {
            dfs(nrow , ncol ,vis,delrow ,delcol , grid);
        }
    }
    // return time;
}
    int numEnclaves(vector<vector<int>>& grid) {
        int n = grid.size() , m= grid[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        int ans=0;
        vector<int>delrow = {-1 ,0 ,0 ,+1};
        vector<int>delcol = {0 , -1 , +1 ,0};

        for(int i=0 ; i<n ; i++)
        {
            for(int j=0 ; j<m ; j++)
            {
                if(i==0 || j==0 || i==n-1 || j==m-1)
                {
                    if(!vis[i][j] && grid[i][j]==1)
                     dfs(i , j ,vis, delrow ,delcol ,grid);
                }
            }
        }
        for(int i=1 ; i<n-1 ;i++)
        {
            for(int j=1 ; j<m-1 ;j++)
            {
                if(!vis[i][j] && grid[i][j]==1)
                ans++;
            }
        }
        return ans;
    }
};
