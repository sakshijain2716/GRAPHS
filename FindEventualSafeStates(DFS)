class Solution {
public:
bool dfs(int node ,vector<int>&vis, vector<int>&path , vector<int>&check ,vector<vector<int>>& graph)   //to check whether any node is a part of cycle or leads to a path 
//int cycle or not 
//if yes then cannot be a safenode
{
    vis[node] = 1;
    path[node] = 1;
    
    for(auto it:graph[node])
    {
        if(!vis[it])
        {
            if(dfs(it ,vis,path,check,graph))    //it is a part of cycle
            {
                check[node]=0;        //so node will lead to a cycle
                return true;
            }
        }
        else if(path[it]==1)    // visited in the same path
        {
            check[node] = 0;
            return true;
        }
    }

    check[node] = 1;     //node is neither leading to a cycle nor a part of cycle
    path[node] = 0;
    return false;      
}
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int>vis(n,0);
        vector<int>path(n,-1);
        vector<int>check(n,0);
        vector<int>safenodes;

        for(int i=0 ;i<n ;i++)
        {
            if(!vis[i])
            {
                dfs(i , vis, path ,check ,graph);
            }
        }
        for(int i=0 ; i<n ;i++)
        {
            if(check[i])
            safenodes.push_back(i);
        }
        return safenodes;
    }
};
